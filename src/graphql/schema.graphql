type Query {
  currentUser: User
  post(id: Int!): Post
  posts(nextCursor: String, limit: Int = 10): PaginatedPost
}

type User {
  id: Int
  username: String
  createdAt: DateISOString
  updatedAt: DateISOString
}

"""A custom Date scalar type"""
scalar DateISOString

type Post {
  id: Int!
  authorId: Int!
  author: User
  title: String!
  url: String
  content: String
  points: Int!
  commentCount: Int!
  comments: [Comment]!
  createdAt: DateISOString!
  updatedAt: DateISOString!
}

type Comment {
  id: Int
  authorId: Int
  author: User
  postId: Int!
  post: Post!
  parentCommentId: Int
  content: String
  depth: Int!
  points: Int!
  commentCount: Int!
  createdAt: DateISOString!
  updatedAt: DateISOString!
}

type PaginatedPost {
  data: [Post]
  totalCount: Int
  pageInfo: PageInfo
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean
}

type Mutation {
  logout: MutationResponse!
  signIn(input: SignInInput!): MutationResponse!
  signUp(input: SignUpInput!): MutationResponse!
  createPost(input: CreatePostInput!): CreatePostPayload
}

type MutationResponse {
  """Indicates whether the mutation is successful or not."""
  success: Boolean!

  """Validation errors if any"""
  errors: [String]
}

input SignInInput {
  username: String!
  password: String!
}

input SignUpInput {
  username: String!
  password: String!
}

type CreatePostPayload {
  post: Post

  """Indicates whether the mutation is successful or not."""
  success: Boolean!

  """Validation errors if any"""
  errors: [String]
}

input CreatePostInput {
  title: String!
  url: String
  content: String
}